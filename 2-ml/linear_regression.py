from learner import Learner
from model import Model


class LinearRegressionLearner(Learner):

    def __init__(self, models, feature_names):
        super().__init__(models, feature_names)
        self.models = [LinearRegressionModel(m, feature_names, index) for index, m in enumerate(self.models)]

    @staticmethod
    def name():
        return "LinearRegressionLearner"

    @staticmethod
    def short_name():
        return "lrl"


class LinearRegressionModel(Model):

    def __init__(self, model, feature_names, ID):
        super().__init__(model, feature_names)
        self.ID = "lrl_" + str(ID)

    def __str__(self):
        return str(self.model)

    @staticmethod
    def name():
        return "lr"

    def feature_importances(self):
        return self.model.coef_

    def custom_output(self, model_index, outfolder):
        self.lr_to_go_code(model_index, outfolder)

    def lr_to_go_code(self, model_index, outfolder):
        coefficients = self.model.coef_
        with open(outfolder + "linear" + str(model_index) + "code.go", "w") as code_file:
            def get_one_factor(feature_name, coefficient):
                return "({})*float64(s.{})".format(coefficient, feature_name)
            code_file.write("// Package ab (Code generated by a Python script)\n")
            code_file.write("package ab\n\n")
            code_file.write("func (s Sample) getEstimatedValue() float64 {\n")
            code_file.write("\treturn ")
            code_file.write("{}".format(get_one_factor(self.feature_names[0], coefficients[0])))
            for (n, c) in zip(self.feature_names[1:], coefficients[1:]):
                code_file.write(" +\n\t\t{}".format(get_one_factor(n, c)))
            code_file.write("\n}\n")
