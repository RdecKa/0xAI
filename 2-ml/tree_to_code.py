import math

from sklearn.tree import _tree

def tree_to_go_code(tree, feature_names, node, tree_index, outfolder):
	with open(outfolder + "tree" + str(tree_index) + "code.go", "w") as code_file:
		def subtree_to_go_code(node, depth):
			indent = "\t" * depth
			if tree.feature[node] != _tree.TREE_UNDEFINED:
				feature = feature_names[tree.feature[node]]
				threshold = tree.threshold[node]
				code_file.write("{}if s.{} <= {} {{\n".format(indent, feature, math.floor(threshold)))
				subtree_to_go_code(tree.children_left[node], depth + 1)
				code_file.write("{}}}\n".format(indent))
				subtree_to_go_code(tree.children_right[node], depth)
			else:
				code_file.write("{}return {}\n".format(indent, tree.value[node][0][0]))

		code_file.write("// Package ab (Code generated by a Python script)\n")
		code_file.write("package ab\n\n")
		code_file.write("func (s Sample) getEstimatedValue() float64 {\n")
		subtree_to_go_code(0, 1)
		code_file.write("}\n")

def write_sample_file(outfolder, feature_names):
	with open(outfolder + "sample.go", "w") as sample_file:
		sample_file.write("// Package ab (Code generated by a Python script)\n")
		sample_file.write("package ab\n\n")
		sample_file.write("type Sample struct {\n\t")
		sample_file.write(feature_names[0])
		for f in feature_names[1:]:
			sample_file.write(", " + f)
		sample_file.write(" int\n")
		sample_file.write("}")
